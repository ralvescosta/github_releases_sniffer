function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import { StyleSheet, Platform } from 'react-native';
import { BottomNavigation, DefaultTheme, DarkTheme } from 'react-native-paper';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import { NavigationHelpersContext, TabActions, useTheme, useLinkBuilder, Link } from '@react-navigation/native';

function MaterialBottomTabViewInner(_ref) {
  let {
    state,
    navigation,
    descriptors
  } = _ref,
      rest = _objectWithoutProperties(_ref, ["state", "navigation", "descriptors"]);

  const {
    dark,
    colors
  } = useTheme();
  const buildLink = useLinkBuilder();
  const theme = React.useMemo(() => {
    const t = dark ? DarkTheme : DefaultTheme;
    return _objectSpread(_objectSpread({}, t), {}, {
      colors: _objectSpread(_objectSpread(_objectSpread({}, t.colors), colors), {}, {
        surface: colors.card
      })
    });
  }, [colors, dark]);
  return /*#__PURE__*/React.createElement(BottomNavigation, _extends({}, rest, {
    theme: theme,
    navigationState: state,
    onIndexChange: index => navigation.dispatch(_objectSpread(_objectSpread({}, TabActions.jumpTo(state.routes[index].name)), {}, {
      target: state.key
    })),
    renderScene: ({
      route
    }) => descriptors[route.key].render(),
    renderTouchable: Platform.OS === 'web' ? (_ref2) => {
      let {
        onPress: _onPress,
        route,
        accessibilityRole: _0,
        borderless: _1,
        centered: _2,
        rippleColor: _3,
        style
      } = _ref2,
          rest = _objectWithoutProperties(_ref2, ["onPress", "route", "accessibilityRole", "borderless", "centered", "rippleColor", "style"]);

      return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {
        // @ts-expect-error: to could be undefined, but it doesn't affect functionality
        to: buildLink(route.name, route.params),
        accessibilityRole: "link",
        onPress: e => {
          if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && ( // ignore clicks with modifier keys
          e.button == null || e.button === 0) // ignore everything but left clicks
          ) {
              e.preventDefault();
              _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);
            }
        },
        style: [styles.touchable, style]
      }));
    } : undefined,
    renderIcon: ({
      route,
      focused,
      color
    }) => {
      const {
        options
      } = descriptors[route.key];

      if (typeof options.tabBarIcon === 'string') {
        return /*#__PURE__*/React.createElement(MaterialCommunityIcons, {
          name: options.tabBarIcon,
          color: color,
          size: 24,
          style: styles.icon
        });
      }

      if (typeof options.tabBarIcon === 'function') {
        return options.tabBarIcon({
          focused,
          color
        });
      }

      return null;
    },
    getLabelText: ({
      route
    }) => {
      const {
        options
      } = descriptors[route.key];
      return options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;
    },
    getColor: ({
      route
    }) => descriptors[route.key].options.tabBarColor,
    getBadge: ({
      route
    }) => descriptors[route.key].options.tabBarBadge,
    getAccessibilityLabel: ({
      route
    }) => descriptors[route.key].options.tabBarAccessibilityLabel,
    getTestID: ({
      route
    }) => descriptors[route.key].options.tabBarTestID,
    onTabPress: ({
      route,
      preventDefault
    }) => {
      const event = navigation.emit({
        type: 'tabPress',
        target: route.key,
        canPreventDefault: true
      });

      if (event.defaultPrevented) {
        preventDefault();
      }
    }
  }));
}

export default function MaterialBottomTabView(props) {
  return /*#__PURE__*/React.createElement(NavigationHelpersContext.Provider, {
    value: props.navigation
  }, /*#__PURE__*/React.createElement(MaterialBottomTabViewInner, props));
}
const styles = StyleSheet.create({
  icon: {
    backgroundColor: 'transparent'
  },
  touchable: {
    display: 'flex',
    justifyContent: 'center'
  }
});
//# sourceMappingURL=MaterialBottomTabView.js.map
{"version":3,"sources":["MaterialBottomTabView.tsx"],"names":["React","StyleSheet","Platform","BottomNavigation","DefaultTheme","DarkTheme","MaterialCommunityIcons","NavigationHelpersContext","TabActions","useTheme","useLinkBuilder","Link","MaterialBottomTabViewInner","state","navigation","descriptors","rest","dark","colors","buildLink","theme","useMemo","t","surface","card","index","dispatch","jumpTo","routes","name","target","key","route","render","OS","onPress","accessibilityRole","_0","borderless","_1","centered","_2","rippleColor","_3","style","params","e","metaKey","altKey","ctrlKey","shiftKey","button","preventDefault","styles","touchable","undefined","focused","color","options","tabBarIcon","icon","tabBarLabel","title","tabBarColor","tabBarBadge","tabBarAccessibilityLabel","tabBarTestID","event","emit","type","canPreventDefault","defaultPrevented","MaterialBottomTabView","props","create","backgroundColor","display","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform } from 'react-native';\nimport { BottomNavigation, DefaultTheme, DarkTheme } from 'react-native-paper';\nimport MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';\nimport {\n  NavigationHelpersContext,\n  Route,\n  TabNavigationState,\n  TabActions,\n  useTheme,\n  useLinkBuilder,\n  Link,\n} from '@react-navigation/native';\n\nimport type {\n  MaterialBottomTabDescriptorMap,\n  MaterialBottomTabNavigationConfig,\n  MaterialBottomTabNavigationHelpers,\n} from '../types';\n\ntype Props = MaterialBottomTabNavigationConfig & {\n  state: TabNavigationState;\n  navigation: MaterialBottomTabNavigationHelpers;\n  descriptors: MaterialBottomTabDescriptorMap;\n};\n\ntype Scene = { route: { key: string } };\n\nfunction MaterialBottomTabViewInner({\n  state,\n  navigation,\n  descriptors,\n  ...rest\n}: Props) {\n  const { dark, colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const theme = React.useMemo(() => {\n    const t = dark ? DarkTheme : DefaultTheme;\n\n    return {\n      ...t,\n      colors: {\n        ...t.colors,\n        ...colors,\n        surface: colors.card,\n      },\n    };\n  }, [colors, dark]);\n\n  return (\n    <BottomNavigation\n      {...rest}\n      theme={theme}\n      navigationState={state}\n      onIndexChange={(index: number) =>\n        navigation.dispatch({\n          ...TabActions.jumpTo(state.routes[index].name),\n          target: state.key,\n        })\n      }\n      renderScene={({ route }) => descriptors[route.key].render()}\n      renderTouchable={\n        Platform.OS === 'web'\n          ? ({\n              onPress,\n              route,\n              accessibilityRole: _0,\n              borderless: _1,\n              centered: _2,\n              rippleColor: _3,\n              style,\n              ...rest\n            }) => {\n              return (\n                <Link\n                  {...rest}\n                  // @ts-expect-error: to could be undefined, but it doesn't affect functionality\n                  to={buildLink(route.name, route.params)}\n                  accessibilityRole=\"link\"\n                  onPress={(e: any) => {\n                    if (\n                      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n                      (e.button == null || e.button === 0) // ignore everything but left clicks\n                    ) {\n                      e.preventDefault();\n                      onPress?.(e);\n                    }\n                  }}\n                  style={[styles.touchable, style]}\n                />\n              );\n            }\n          : undefined\n      }\n      renderIcon={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (typeof options.tabBarIcon === 'string') {\n          return (\n            <MaterialCommunityIcons\n              name={options.tabBarIcon}\n              color={color}\n              size={24}\n              style={styles.icon}\n            />\n          );\n        }\n\n        if (typeof options.tabBarIcon === 'function') {\n          return options.tabBarIcon({ focused, color });\n        }\n\n        return null;\n      }}\n      getLabelText={({ route }: Scene) => {\n        const { options } = descriptors[route.key];\n\n        return options.tabBarLabel !== undefined\n          ? options.tabBarLabel\n          : options.title !== undefined\n          ? options.title\n          : (route as Route<string>).name;\n      }}\n      getColor={({ route }) => descriptors[route.key].options.tabBarColor}\n      getBadge={({ route }) => descriptors[route.key].options.tabBarBadge}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n    />\n  );\n}\n\nexport default function MaterialBottomTabView(props: Props) {\n  return (\n    <NavigationHelpersContext.Provider value={props.navigation}>\n      <MaterialBottomTabViewInner {...props} />\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n  touchable: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n});\n"]}
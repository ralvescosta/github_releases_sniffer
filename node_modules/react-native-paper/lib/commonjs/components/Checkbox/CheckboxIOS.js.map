{"version":3,"sources":["CheckboxIOS.tsx"],"names":["CheckboxIOS","React","Component","render","props","status","disabled","onPress","theme","rest","checked","indeterminate","checkedColor","colors","color","accent","rippleColor","text","alpha","rgb","string","fade","icon","styles","container","opacity","StyleSheet","create","borderRadius","padding"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;AAgBA,MAAMA,WAAN,SAA0BC,KAAK,CAACC,SAAhC,CAAiD;AAG/CC,EAAAA,MAAM,GAAG;AACP,wBAAsD,KAAKC,KAA3D;AAAA,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,QAAV;AAAoBC,MAAAA,OAApB;AAA6BC,MAAAA;AAA7B,KAAN;AAAA,UAA6CC,IAA7C;;AACA,UAAMC,OAAO,GAAGL,MAAM,KAAK,SAA3B;AACA,UAAMM,aAAa,GAAGN,MAAM,KAAK,eAAjC;AAEA,UAAMO,YAAY,GAAGN,QAAQ,GACzBE,KAAK,CAACK,MAAN,CAAaP,QADY,GAEzB,KAAKF,KAAL,CAAWU,KAAX,IAAoBN,KAAK,CAACK,MAAN,CAAaE,MAFrC;AAIA,QAAIC,WAAJ;;AAEA,QAAIV,QAAJ,EAAc;AACZU,MAAAA,WAAW,GAAG,oBAAMR,KAAK,CAACK,MAAN,CAAaI,IAAnB,EAAyBC,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,GAA2CC,MAA3C,EAAd;AACD,KAFD,MAEO;AACLJ,MAAAA,WAAW,GAAG,oBAAMJ,YAAN,EAAoBS,IAApB,CAAyB,IAAzB,EAA+BF,GAA/B,GAAqCC,MAArC,EAAd;AACD;;AAED,UAAME,IAAI,GAAGX,aAAa,GAAG,OAAH,GAAa,OAAvC;AAEA,wBACE,oBAAC,wBAAD,eACMF,IADN;AAEE,MAAA,UAAU,MAFZ;AAGE,MAAA,WAAW,EAAEO,WAHf;AAIE,MAAA,OAAO,EAAET,OAJX;AAKE,MAAA,QAAQ,EAAED,QALZ;AAME,MAAA,mBAAmB,EAAEA,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAN3D;AAOE,MAAA,0BAA0B,EAAC,QAP7B;AAQE,MAAA,iBAAiB,EAAC,UARpB;AASE,MAAA,kBAAkB,EAAE;AAAEA,QAAAA,QAAF;AAAYI,QAAAA;AAAZ,OATtB;AAUE,MAAA,uBAAuB,EAAC,QAV1B;AAWE,MAAA,KAAK,EAAEa,MAAM,CAACC;AAXhB,qBAaE,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAEd,aAAa,IAAID,OAAjB,GAA2B,CAA3B,GAA+B;AAA1C;AAAb,oBACE,oBAAC,8BAAD;AACE,MAAA,gBAAgB,EAAE,KADpB;AAEE,MAAA,IAAI,EAAEY,IAFR;AAGE,MAAA,IAAI,EAAE,EAHR;AAIE,MAAA,KAAK,EAAEV,YAJT;AAKE,MAAA,SAAS,EAAC;AALZ,MADF,CAbF,CADF;AAyBD;;AA/C8C;;;;gBAA3CZ,W,iBACiB,c;;AAiDvB,MAAMuB,MAAM,GAAGG,wBAAWC,MAAX,CAAkB;AAC/BH,EAAAA,SAAS,EAAE;AACTI,IAAAA,YAAY,EAAE,EADL;AAETC,IAAAA,OAAO,EAAE;AAFA;AADoB,CAAlB,CAAf;;eAOe,wBAAU7B,WAAV,C,EAEf","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxIOS extends React.Component<Props> {\n  static displayName = 'Checkbox.IOS';\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n\n    const checkedColor = disabled\n      ? theme.colors.disabled\n      : this.props.color || theme.colors.accent;\n\n    let rippleColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    } else {\n      rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    }\n\n    const icon = indeterminate ? 'minus' : 'check';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"checkbox\"\n        accessibilityState={{ disabled, checked }}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n          <MaterialCommunityIcon\n            allowFontScaling={false}\n            name={icon}\n            size={24}\n            color={checkedColor}\n            direction=\"ltr\"\n          />\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nexport { CheckboxIOS };\n"]}
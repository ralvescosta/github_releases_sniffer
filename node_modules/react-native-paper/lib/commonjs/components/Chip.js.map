{"version":3,"sources":["Chip.tsx"],"names":["Chip","React","Component","elevation","Animated","Value","scale","props","theme","animation","timing","state","toValue","duration","useNativeDriver","start","render","mode","children","icon","avatar","selected","disabled","accessibilityLabel","closeIconAccessibilityLabel","onPress","onLongPress","onClose","textStyle","style","testID","selectedColor","ellipsizeMode","rest","dark","colors","backgroundColor","surface","borderRadius","StyleSheet","flatten","borderColor","undefined","white","black","alpha","rgb","string","textColor","text","iconColor","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityState","push","styles","container","Platform","OS","handlePressIn","handlePressOut","content","avatarWrapper","opacity","isValidElement","cloneElement","avatarSelected","fonts","regular","color","marginRight","marginLeft","closeIcon","create","borderWidth","hairlineWidth","borderStyle","flexDirection","alignItems","paddingHorizontal","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","position","top","left"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  AccessibilityTrait,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { EllipsizeProp } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: any;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Chip extends React.Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    mode: 'flat',\n    disabled: false,\n    selected: false,\n    closeIconAccessibilityLabel: 'Close',\n  };\n\n  state = {\n    elevation: new Animated.Value(0),\n  };\n\n  private handlePressIn = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private handlePressOut = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  render() {\n    const {\n      mode,\n      children,\n      icon,\n      avatar,\n      selected,\n      disabled,\n      accessibilityLabel,\n      closeIconAccessibilityLabel,\n      onPress,\n      onLongPress,\n      onClose,\n      textStyle,\n      style,\n      theme,\n      testID,\n      selectedColor,\n      ellipsizeMode,\n      ...rest\n    } = this.props;\n    const { dark, colors } = theme;\n\n    const {\n      backgroundColor = mode === 'outlined'\n        ? colors.surface\n        : dark\n        ? '#383838'\n        : '#ebebeb',\n      borderRadius = 16,\n    } = StyleSheet.flatten(style) || {};\n\n    const borderColor =\n      mode === 'outlined'\n        ? color(\n            selectedColor !== undefined\n              ? selectedColor\n              : color(dark ? white : black)\n          )\n            .alpha(0.29)\n            .rgb()\n            .string()\n        : backgroundColor;\n    const textColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n    const iconColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n    const selectedBackgroundColor = (dark\n      ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4)\n      : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)\n    )\n      .rgb()\n      .string();\n\n    const underlayColor = selectedColor\n      ? color(selectedColor).fade(0.5).rgb().string()\n      : selectedBackgroundColor;\n\n    const accessibilityTraits: AccessibilityTrait[] = ['button'];\n    const accessibilityState: AccessibilityState = {\n      selected,\n      disabled,\n    };\n\n    if (selected) {\n      accessibilityTraits.push('selected');\n    }\n\n    if (disabled) {\n      accessibilityTraits.push('disabled');\n    }\n\n    return (\n      <Surface\n        style={\n          [\n            styles.container,\n            {\n              elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n              backgroundColor: selected\n                ? selectedBackgroundColor\n                : backgroundColor,\n              borderColor,\n              borderRadius,\n            },\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        {...rest}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          style={{ borderRadius }}\n          onPress={onPress}\n          onLongPress={onLongPress}\n          onPressIn={this.handlePressIn}\n          onPressOut={this.handlePressOut}\n          underlayColor={underlayColor}\n          disabled={disabled}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={accessibilityTraits}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={accessibilityState}\n          testID={testID}\n        >\n          <View style={styles.content}>\n            {avatar && !icon ? (\n              <View\n                style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}\n              >\n                {React.isValidElement(avatar)\n                  ? /* $FlowFixMe */\n                    React.cloneElement(avatar, {\n                      /* $FlowFixMe */\n                      style: [styles.avatar, avatar.props.style],\n                    })\n                  : avatar}\n              </View>\n            ) : null}\n            {icon || selected ? (\n              <View\n                style={[\n                  styles.icon,\n                  avatar ? [styles.avatar, styles.avatarSelected] : null,\n                ]}\n              >\n                <Icon\n                  source={icon || 'check'}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              </View>\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.text,\n                {\n                  ...theme.fonts.regular,\n                  color: textColor,\n                  marginRight: onClose ? 0 : 8,\n                  marginLeft: avatar || icon || selected ? 4 : 8,\n                },\n                textStyle,\n              ]}\n              ellipsizeMode={ellipsizeMode}\n            >\n              {children}\n            </Text>\n          </View>\n        </TouchableRipple>\n        {onClose ? (\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            accessibilityTraits=\"button\"\n            accessibilityComponentType=\"button\"\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View style={[styles.icon, styles.closeIcon]}>\n              <Icon source=\"close-circle\" size={16} color={iconColor} />\n            </View>\n          </TouchableWithoutFeedback>\n        ) : null}\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: 'row',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n});\n\nexport default withTheme(Chip);\n"]}
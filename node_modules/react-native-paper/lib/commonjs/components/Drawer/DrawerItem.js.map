{"version":3,"sources":["DrawerItem.tsx"],"names":["DrawerItem","React","Component","render","props","icon","label","active","theme","style","onPress","accessibilityLabel","rest","colors","roundness","backgroundColor","primary","alpha","rgb","string","contentColor","text","font","fonts","medium","labelMargin","styles","container","borderRadius","selected","wrapper","color","marginLeft","StyleSheet","create","marginHorizontal","marginVertical","flexDirection","alignItems","padding","marginRight"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,MAAMA,UAAN,SAAyBC,KAAK,CAACC,SAA/B,CAAgD;AAG9CC,EAAAA,MAAM,GAAG;AACP,wBASI,KAAKC,KATT;AAAA,UAAM;AACJC,MAAAA,IADI;AAEJC,MAAAA,KAFI;AAGJC,MAAAA,MAHI;AAIJC,MAAAA,KAJI;AAKJC,MAAAA,KALI;AAMJC,MAAAA,OANI;AAOJC,MAAAA;AAPI,KAAN;AAAA,UAQKC,IARL;;AAUA,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAwBN,KAA9B;AACA,UAAMO,eAAe,GAAGR,MAAM,GAC1B,oBAAMM,MAAM,CAACG,OAAb,EAAsBC,KAAtB,CAA4B,IAA5B,EAAkCC,GAAlC,GAAwCC,MAAxC,EAD0B,GAE1B,aAFJ;AAGA,UAAMC,YAAY,GAAGb,MAAM,GACvBM,MAAM,CAACG,OADgB,GAEvB,oBAAMH,MAAM,CAACQ,IAAb,EAAmBJ,KAAnB,CAAyB,IAAzB,EAA+BC,GAA/B,GAAqCC,MAArC,EAFJ;AAGA,UAAMG,IAAI,GAAGd,KAAK,CAACe,KAAN,CAAYC,MAAzB;AACA,UAAMC,WAAW,GAAGpB,IAAI,GAAG,EAAH,GAAQ,CAAhC;AAEA,wBACE,oBAAC,iBAAD,eACMO,IADN;AAEE,MAAA,KAAK,EAAE,CACLc,MAAM,CAACC,SADF,EAEL;AAAEZ,QAAAA,eAAF;AAAmBa,QAAAA,YAAY,EAAEd;AAAjC,OAFK,EAGLL,KAHK;AAFT,qBAQE,oBAAC,wBAAD;AACE,MAAA,UAAU,MADZ;AAEE,MAAA,YAAY,EAAE,CAFhB;AAGE,MAAA,OAAO,EAAEC,OAHX;AAIE,MAAA,KAAK,EAAE;AAAEkB,QAAAA,YAAY,EAAEd;AAAhB,OAJT;AAKE,MAAA,mBAAmB,EAAEP,MAAM,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QALzD;AAME,MAAA,0BAA0B,EAAC,QAN7B;AAOE,MAAA,iBAAiB,EAAC,QAPpB;AAQE,MAAA,kBAAkB,EAAE;AAAEsB,QAAAA,QAAQ,EAAEtB;AAAZ,OARtB;AASE,MAAA,kBAAkB,EAAEI;AATtB,oBAWE,oBAAC,iBAAD;AAAM,MAAA,KAAK,EAAEe,MAAM,CAACI;AAApB,OACGzB,IAAI,gBACH,oBAAC,aAAD;AAAM,MAAA,MAAM,EAAEA,IAAd;AAAoB,MAAA,IAAI,EAAE,EAA1B;AAA8B,MAAA,KAAK,EAAEe;AAArC,MADG,GAED,IAHN,eAIE,oBAAC,aAAD;AACE,MAAA,aAAa,EAAE,CADjB;AAEE,MAAA,KAAK,EAAE,CACLM,MAAM,CAACpB,KADF;AAGHyB,QAAAA,KAAK,EAAEX;AAHJ,SAIAE,IAJA;AAKHU,QAAAA,UAAU,EAAEP;AALT;AAFT,OAWGnB,KAXH,CAJF,CAXF,CARF,CADF;AAyCD;;AAjE6C;;gBAA1CN,U,iBACiB,a;;AAmEvB,MAAM0B,MAAM,GAAGO,wBAAWC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,gBAAgB,EAAE,EADT;AAETC,IAAAA,cAAc,EAAE;AAFP,GADoB;AAK/BN,EAAAA,OAAO,EAAE;AACPO,IAAAA,aAAa,EAAE,KADR;AAEPC,IAAAA,UAAU,EAAE,QAFL;AAGPC,IAAAA,OAAO,EAAE;AAHF,GALsB;AAU/BjC,EAAAA,KAAK,EAAE;AACLkC,IAAAA,WAAW,EAAE;AADR;AAVwB,CAAlB,CAAf;;eAee,wBAAUxC,UAAV,C","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.Item\n *      style={{ backgroundColor: '#64ffda' }}\n *      icon=\"star\"\n *      label=\"First Item\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass DrawerItem extends React.Component<Props> {\n  static displayName = 'Drawer.Item';\n\n  render() {\n    const {\n      icon,\n      label,\n      active,\n      theme,\n      style,\n      onPress,\n      accessibilityLabel,\n      ...rest\n    } = this.props;\n    const { colors, roundness } = theme;\n    const backgroundColor = active\n      ? color(colors.primary).alpha(0.12).rgb().string()\n      : 'transparent';\n    const contentColor = active\n      ? colors.primary\n      : color(colors.text).alpha(0.68).rgb().string();\n    const font = theme.fonts.medium;\n    const labelMargin = icon ? 32 : 0;\n\n    return (\n      <View\n        {...rest}\n        style={[\n          styles.container,\n          { backgroundColor, borderRadius: roundness },\n          style,\n        ]}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          onPress={onPress}\n          style={{ borderRadius: roundness }}\n          accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ selected: active }}\n          accessibilityLabel={accessibilityLabel}\n        >\n          <View style={styles.wrapper}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  ...font,\n                  marginLeft: labelMargin,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n        </TouchableRipple>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]}